// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Backend.Entities;

#nullable disable

namespace Project.Backend.Migrations
{
    [DbContext(typeof(ProjectDBContext))]
    [Migration("20240510180555_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project.Backend.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Project.Backend.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Project.Backend.Entities.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("Project.Backend.Entities.DietType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DietTypes");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CookingTime")
                        .HasColumnType("int");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostDates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTime")
                        .HasColumnType("int");

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.Property<int>("Serves")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeCollection", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("FoodRecipeCollections");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeCourse", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("FoodRecipeCourses");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeDietType", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("DietTypeId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "DietTypeId");

                    b.HasIndex("DietTypeId");

                    b.ToTable("FoodRecipeDietTypes");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("FoodRecipeIngredients");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeKeyword", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("FoodRecipeKeywords");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeNutritionInfo", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("NutritionInfoId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "NutritionInfoId");

                    b.HasIndex("NutritionInfoId");

                    b.ToTable("FoodRecipeNutritionInfos");
                });

            modelBuilder.Entity("Project.Backend.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Project.Backend.Entities.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("Project.Backend.Entities.NutritionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutritionInfos");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipe", b =>
                {
                    b.HasOne("Project.Backend.Entities.Cuisine", "Cuisine")
                        .WithMany("Recipes")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeCollection", b =>
                {
                    b.HasOne("Project.Backend.Entities.Collection", "Collection")
                        .WithMany("FoodRecipeCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Backend.Entities.FoodRecipe", "Recipe")
                        .WithMany("FoodRecipeCollections")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeCourse", b =>
                {
                    b.HasOne("Project.Backend.Entities.Course", "Course")
                        .WithMany("FoodRecipeCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Backend.Entities.FoodRecipe", "Recipe")
                        .WithMany("FoodRecipeCourses")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeDietType", b =>
                {
                    b.HasOne("Project.Backend.Entities.DietType", "DietType")
                        .WithMany("FoodRecipeDietTypes")
                        .HasForeignKey("DietTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Backend.Entities.FoodRecipe", "Recipe")
                        .WithMany("FoodRecipeDietTypes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietType");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeIngredient", b =>
                {
                    b.HasOne("Project.Backend.Entities.Ingredient", "Ingredient")
                        .WithMany("FoodRecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Backend.Entities.FoodRecipe", "Recipe")
                        .WithMany("FoodRecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeKeyword", b =>
                {
                    b.HasOne("Project.Backend.Entities.Keyword", "Keyword")
                        .WithMany("FoodRecipeKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Backend.Entities.FoodRecipe", "Recipe")
                        .WithMany("FoodRecipeKeywords")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipeNutritionInfo", b =>
                {
                    b.HasOne("Project.Backend.Entities.NutritionInfo", "NutritionInfo")
                        .WithMany("FoodRecipeNutritionInfos")
                        .HasForeignKey("NutritionInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Backend.Entities.FoodRecipe", "Recipe")
                        .WithMany("FoodRecipeNutritionInfos")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionInfo");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project.Backend.Entities.Collection", b =>
                {
                    b.Navigation("FoodRecipeCollections");
                });

            modelBuilder.Entity("Project.Backend.Entities.Course", b =>
                {
                    b.Navigation("FoodRecipeCourses");
                });

            modelBuilder.Entity("Project.Backend.Entities.Cuisine", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Project.Backend.Entities.DietType", b =>
                {
                    b.Navigation("FoodRecipeDietTypes");
                });

            modelBuilder.Entity("Project.Backend.Entities.FoodRecipe", b =>
                {
                    b.Navigation("FoodRecipeCollections");

                    b.Navigation("FoodRecipeCourses");

                    b.Navigation("FoodRecipeDietTypes");

                    b.Navigation("FoodRecipeIngredients");

                    b.Navigation("FoodRecipeKeywords");

                    b.Navigation("FoodRecipeNutritionInfos");
                });

            modelBuilder.Entity("Project.Backend.Entities.Ingredient", b =>
                {
                    b.Navigation("FoodRecipeIngredients");
                });

            modelBuilder.Entity("Project.Backend.Entities.Keyword", b =>
                {
                    b.Navigation("FoodRecipeKeywords");
                });

            modelBuilder.Entity("Project.Backend.Entities.NutritionInfo", b =>
                {
                    b.Navigation("FoodRecipeNutritionInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
